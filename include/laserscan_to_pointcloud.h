/**
 * @file laserscan_to_pointcloud.h
 * @copyright Copyright (c) 2020, FADA-CATEC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once
#ifndef _LASERSCAN_TO_POINTCLOUD_H
#define _LASERSCAN_TO_POINTCLOUD_H

#include "ros/ros.h"
#include <tf/transform_listener.h>
#include <laser_geometry/laser_geometry.h>
#include "pcl_conversions/pcl_conversions.h"
#include "std_srvs/Trigger.h"
#include "std_msgs/String.h"

class ScanToPointCloud 
{
    typedef pcl::PointCloud<pcl::PointXYZ> PointCloudXYZ;
    
public:
    /**
     * @brief Construct a new Scan To Point Cloud object
     * 
     */
    ScanToPointCloud(ros::NodeHandle nh);

private:
    /**
     * @brief Callback for adding the new scan to the point cloud
     * 
     * @param scan New laser scan
     */
    void scanCb(const sensor_msgs::LaserScan::ConstPtr& scan);

    /**
     * @brief Saves the cloud as .pcd format. The destination folder will be on package leica_scanstation_utils/pointclouds
     * 
     * @param req Not used
     * @param res Not used
     * @return true Default value
     * @return false Not used
     */
    bool saveCloudCb(std_srvs::Trigger::Request &req, std_srvs::Trigger::Response &res);
        
    /**
     * @brief Callback for read file name in which store point cloud scanned
     * 
     * @param msg 
     */
    void filenameCb(const std_msgs::String::ConstPtr& msg);

    /**
     * @brief Count number of scans finished to append on file name
     * 
     */
    int counter_;

    /**
     * @brief File name to store point cloud scanned
     * 
     */
    std::string file_name_;

    /**
     * @brief Instance of object LaserProjection to transform the laser scan into a point cloud
     * 
     */
    laser_geometry::LaserProjection projector_;

    /**
     * @brief Reference system of the listener
     * 
     */
    tf::TransformListener tf_listener_;

    /**
     * @brief Point cloud generated by the Leica
     * 
     */
    PointCloudXYZ::Ptr total_cloud_;

    /**
     * @brief Attaches header info and more to total_cloud_ in the first iteration
     * 
     */
    bool init_cloud_ = true;

    /**
     * @brief Pointer to the ROS node
     * 
     */
    ros::NodeHandle nh_;

    /**
     * @brief Publisher for the point cloud
     * 
     */
    ros::Publisher pub_;

    /**
     * @brief Subscriber for the laser scan
     * 
     */
    ros::Subscriber sub_;

    /**
     * @brief Subscriber to receive file name
     * 
     */
    ros::Subscriber filename_sub_;

    /**
     * @brief Service for saving the point cloud
     * 
     */
    ros::ServiceServer store_sub_;
};

#endif